// NOTE: *** indicate shared methods/objectsconstant /*boolean*/ DEBUG 			:= NIL;  	// true for lots of printingconstant /*boolean*/ PROFILE		:= NIL;constant /*boolean*/ FILL_RECT		:= TRUE;	// see vc.fillRectconstant /*boolean*/ DRAW_RECT		:= TRUE;	// see vc.drawRawRectconstant /*boolean*/ TIMING			:= NIL;		// see vc.setGauge, rfb.nextInputLen; vc.Refresh, rfb.nextOutputconstant /*boolean*/ ADD_SERVER		:= TRUE;	// don't need all for viewerconstant /*boolean*/ nos21			:= TRUE;constant /*String*/ kFileName 		:= "nvnc";constant /*String*/ kBetaVersion 	:= "b1";constant /*String*/ kVersionInt		:= "33";constant /*String*/ kVersionNum 	:= "3.3";DefineGlobalConstant(/*String*/ 'titleLabel, kAppName && kVersionNum & kBetaVersion);Write(kFileName & kVersionInt & kBetaVersion & 	(if DEBUG then $D) & (if PROFILE then $P) & (if TIMING then $T)	// & (if DRAW_RECT then $R) & (if FILL_RECT then $F)	& ".pkg" && DateNTime(Time()) & unicodeCR);Write("breakonthrows:=nil;\n");Write("vnc:?close();vnc:=nil\n");Write("vnc:=GetRoot().|vnc:TKnollSys|;nil;vnc:open()\n");/*- fixed Disconnect bug- removed NOS 2.0 compatibility- overlay rather than remove button bar- clipboard support, keyboard Fn & ESC keys (emate?)- added server*/DeclareGlobalFn('GetClipboard,0);DeclareGlobalFn('SetClipboard,1);//DeclareGlobalFn('HandleKeyEvents, 1);// =====// aboutconstant kvncURL	:= "http://www.kagi.com/weyer/#VNC";constant kvncMail	:= "mailto:weyer@kagi.com";constant kAuthor 	:= "  Steve Weyer";constant kNewtsCapeSymbol := '|NewtsCape:NewtsCape|;DefineGlobalConstant('/*string*/ ABOUT_TEXT,kAppName & $: && LocObj("Virtual Network Computer", 'vnc) & unicodeCR &LocObj("Viewer", 'viewer) & $: && LocObj("use your Newton\n\tto view & control a remote system.", 'aboutTextC) & unicodeCR &if ADD_SERVER thenLocObj("Server", 'server) & $: && LocObj("view & control your Newton\n\tfrom a remote system.", 'aboutTextS));   // DateNTime(Time())// =====// based on Zlib-2001101-1721constant kZlibName		:= "zlib";constant Z_STREAM_END 	:= 1;SetPartFrameSlot('RemovalApproval, func(/*symbol*/ unitName, int major, int minor)if unitName = kZlibSymbolthen return	LocObj("If you remove",'ifRemove) && kZlibName & $, &&	kAppName && LocObj(		"will disable Zlib encoding",	//"will disable Zlib & Tight encodings",		'disableEncodings););SetPartFrameSlot('ImportDisabled, func(/*symbol*/ unitName, int major, int minor)if unitName = kZlibSymbolthen begin	local vnc := GetRoot().(kAppSymbol);	vnc.zlib := nil;	vnc.optionsFrame:?close();	vnc:?setEncodings();	end;);// =====constant null 	:= nil;				// for Java compatibility/convenienceconstant false	:= nil;constant /*String*/ connLabel 		:= LocObj("Connect", 'connect);constant /*String*/ discLabel 		:= LocObj("Disconnect", 'disconnect);constant /*String*/ optionsLabel 	:= LocObj("Options", 'options);constant /*String*/ clipLabel 		:= LocObj("ClipBoard", 'clipboard);constant /*String*/ logLabel 		:= LocObj("Log", 'log);constant /*int*/ DEFAULT_PORT_INT 	:= 5900;constant /*int*/ HOST_LENGTH		:= 5;		// # of hosts/passwords to saveconstant /*int*/ _BPP 				:= 4;	// bits per pixel. used only here for bpp=4 (not DRAW_RECT, ADD_SERVER)constant /*int*/ _PPB 				:= 2;	// 8 div bpp; pixels per byte. used only here for bpp=4constant /*int*/ BITMAP_OFFSET		:= 28;	// length of headerDefineGlobalConstant('BM_STYLE,		{transferMode: modeCopy, fillPattern: vfWhite, penPattern: vfNone});DefineGlobalConstant('GAUGE_STYLE,	{transferMode: modeXor,  fillPattern: vfBlack, penPattern: vfNone});constant /*int*/ VBO_LEN			:= 480*18;	// curBuf/drawRawRect (enough to handle 'landscape row') [18 for zlib]constant /*int*/ kVBOFlush			:= 32*1024;DefineGlobalConstant('kNilFunc, 	func() nil);	// for v.disconnectDefineGlobalConstant('kOptionsOpen,	func() optionsFrame:open());	// share w/ DoPrefs, Prefs buttonconstant FATAL_ERROR				:= true;constant IGNORE_ERROR				:= nil;constant DO_LOG						:= true;constant NO_LOG						:= nil;// AddProcrastinatedX symbolsconstant /*symbol*/ EVENT_PEN		:= 'vncPen;constant /*symbol*/ EVENT_SCR		:= 'vncScr;// these are in ticks (1/60)constant /*int*/ EVENT_SCR2D_DELAY	:= 20;	// msec between steps of incremental scrollersconstant /*int*/ SLIDER_DELAY		:=  1;	// :TrackSliderconstant /*int*/ SLIDER_CLICK_DELAY	:=  2;	// TBslider:viewClickScriptconstant /*int*/ UPDATE_SCR_DELAY	:= 20;	// :viewScrollDownScript, viewScrollUpScriptconstant /*int*/ MOVE_DELAY			:= 30;	// :viewGestureScript (between move pts)// these are in msec (1/1000)constant /*int*/ EVENT_SCR_DELAY	:= 500;		// :viewScrollDownScript, viewScrollUpScriptconstant /*int*/ NO_DELAY			:= 0;constant /*int*/ KEY_DELAY			:= 1200;constant /*int*/ DOUBLE_CLICK_DELAY	:= 1000;	// :viewGestureScript (tap before doubletap)constant /*int*/ INCR_DELAY			:= nil;		// use refresh*1000constant NO_SOUND := nil;constant NO_MSG := nil;constant /*int[]*/ SCREEN_SIZE_X	:= '[128,192,240,256];constant /*int[]*/ SCREEN_SIZE_Y	:= SCREEN_SIZE_X;DefineGlobalConstant('kFullSize,	Length(SCREEN_SIZE_X));DefineGlobalConstant('kFullBarSize,	Length(SCREEN_SIZE_X)+1);constant kGridSize					:= 16; // for server//DeclareGlobalFn('KillStdButtonBar, 1);DefineGlobalConstant('noButtonBar,	0); //Array(4,{buttonBarPosition: 'none}));constant restoreButtonBar			:= nil;constant sameButtonBar				:= true;constant kLowerCase := "`1234567890-=[]\\;',./";	// note: \\constant kUpperCase := "~!@#$%^&*()_+{}|:\"<>?";	// note: \"DefineGlobalConstant('AaDiff, Ord($a)-Ord($A));DefineGlobalConstant('kYesNo,		[LocObj("Yes",'yes), LocObj("No",'no)]);// =====constant kExpanded 	 := 0;constant kCompactBot := 1;constant kCompactTop := 2;constant kCompactFloat := 3;constant DISPLAY_RADIO 	:= 1;constant PORT_RADIO 	:= 2;constant VIEWER_RADIO 	:= 1;constant SERVER_RADIO	:= 2;DefineGlobalConstant('kDefaultPrefs, {tag: kPackageName,hosts: 			[],				// e.g. "192.168.1.104"display: 		0,port: 			DEFAULT_PORT_INT,passwords: 		[],dpRadio:		DISPLAY_RADIO,encoding: 		5,				// Hextile (=rfbProto.EncodingHextile)useCopyRect: 	nil,			// NorightClick:		4,				// = rfbProto.kBut3shareDesktop: 	nil,			// Norefresh: 		5,				// secdisplaySize:	0,				// SCREEN_SIZE_X[0]bpp:			4,kbdMode:		0,noHWR:			nil,			// EnabledminUI:			kExpanded,scrollInc:		16,overview:		nil,serverName:		nil,serverPassword:	"",vsRadio:		VIEWER_RADIO,//drawEachPixelForRawRects: nil,// Fast (vc:DrawRawRect)//reverseMouseButtons2And3: nil,	// Normal//copyRectFast: false,		// Reliable});DefineGlobalConstant('kRect0, SetBounds(0,0,0,0));constant /*int*/ kFullOffset := 40;DefineGlobalConstant('kRectNIE, SetBounds(kFullOffset,kFullOffset,-kFullOffset,-kFullOffset)); // e.g., Clipboard/Log// used as viewSetupFormScript by info,kbd,action,close// also used or called by optionsFrame, authenticator, aboutDefineGlobalConstant('kShiftView,func()	// ***begin	viewFlags 	:= _proto.viewFlags;	viewJustify := _proto.viewJustify;	//Band(viewJustify, Bnot(vjParentBottomV))	viewBounds  := _proto.viewBounds;	local int minUI := options.minUI;	if minUI = uiHide	// in vnc, true for minUI=kCompactFloat	then viewFlags := Band(viewFlags, Bnot(vVisible))	else if minUI = kCompactTop	// non-default	then begin		viewJustify := viewJustify - vjParentBottomV; // vjParentTopV=0		viewBounds  := Clone(viewBounds);		local int top 	:= viewBounds.top;		viewBounds.top 	:= -viewBounds.bottom;		viewBounds.bottom := -top;		end;	if HasVariable(self, 'tempOptions)	// kludge so optionsFrame can share	then self.tempOptions := {};	inherited:?viewSetupFormScript();end);// =====DefineGlobalConstant('kFrameMunger, func(/*frame*/ destFrame, /*frame*/ srcFrame, /*symbol*/ add, array syms)begin // add: nil -> remove;  syms like range; nil -> all	local /*symbol*/ sym, val;	if IsArray(syms)	then begin		foreach sym in syms		do if add			then destFrame.(EnsureInternal(sym)) := srcFrame.(sym)			else RemoveSlot(destFrame, sym);		end	else foreach sym,val in srcFrame	// all		do if add			then destFrame.(EnsureInternal(sym)) := val			else RemoveSlot(destFrame,sym);end);DefineGlobalConstant('kRectEqual, func(/*frame*/ bnds1, /*frame*/ bnds2)begin	bnds1.left   = bnds2.left  and	bnds1.top    = bnds2.top   and	bnds1.right  = bnds2.right and	bnds1.bottom = bnds2.bottom;end);// for vc:Refreshconstant NO_REFRESH 	:= nil;			// viewDrawScript blocking, also writeMouseconstant FULL_REFRESH	:= 0;constant INCR_REFRESH	:= 1;constant HOLD_REFRESH	:= 2;			// used by viewIdleScript to sync updatesconstant DONE_REFRESH	:= 3;constant IMMED_REFRESH	:= 5;			// also used as a DELAY(msec)DefineGlobalConstant('kGetSymbol, /*symbol*/ func(/*frame*/ obj) // for debuggingif obj.preallocatedContextthen obj.preallocatedContextelse if obj.appSymbolthen obj.appSymbolelse begin	local /*symbol*/ sym;	local /*frame*/ root := GetRoot();	foreach sym in '[notification, notifyIcon, calculator, alarm, stylePalette, preferenceRoll,		handwritingpractice, |InternetSetup:Newton|, OutOfMemoryAlert, findDrawer, assistant,		alphaKeyboard, phoneKeyboard, dateKeyboard, numericKeyboard, TinyTim, SleepScreen,]	do  if obj = root.(sym)		then return sym;	if obj.pickItems and obj.callbackContext	then return 'aPopupPicker;	NIL;	end);DefineGlobalConstant('kRefreshPatch, {viewDrawScript: func()	// *** shared by newtVNCbegin	GetRoot().(kAppSymbol):?Refresh(self, 'viewDrawScript, :GetDrawBox());	inherited:?viewDrawScript();end,viewQuitScript: func()begin	GetRoot().(kAppSymbol):?Refresh(self, 'viewQuitScript, :GlobalOuterBox());	inherited:?viewQuitScript();end,viewChangedScript: func(slot,view)	// for clParagraphView, clGaugeViewbegin	GetRoot().(kAppSymbol):?Refresh(self, if DEBUG then 'viewChangedScript & $: & slot, :GlobalOuterBox());	inherited:?viewChangedScript(slot,view);end,monthChangedScript: func()	// for clMonthviewbegin	GetRoot().(kAppSymbol):?Refresh(self, 'monthChangedScript, :GlobalOuterBox());	inherited:?monthChangedScript();end,Dirty: func()		// for clMonthviewbegin	GetRoot().(kAppSymbol):?Refresh(self, 'Dirty, :GlobalOuterBox());	inherited:?Dirty();end,newTime: func(arg)begin	GetRoot().(kAppSymbol):?Refresh(self, 'newTime, :GlobalOuterBox());	inherited:?newTime(arg);end,clusterChanged: func()	// for protoRadioClusterbegin	GetRoot().(kAppSymbol):?Refresh(self, 'clusterChanged, :GlobalBox());	inherited:?clusterChanged();end,valueChanged: func()	// for protoCheckboxbegin	GetRoot().(kAppSymbol):?Refresh(self, 'valueChanged, :GlobalBox());	inherited:?valueChanged();end,});DefineGlobalConstant('kIsProto, func(/*frame*/ obj, /*frame*/ proto)begin	while (obj := obj._proto)	do  if obj = proto		then return true;	return nil;end);// used in v.installRefreshPatch. param to kFrameMungerDefineGlobalConstant('kGetPatchSlots, func(/*frame*/ obj)try begin	local int viewClass := obj.viewClass;	if viewClass = clParagraphView or viewClass = clGaugeView	then '[viewChangedScript]	//viewQuitScript	else if viewClass = clMonthView	then '[monthChangedScript, Dirty]	else if call kIsProto with (obj, protoDatePicker)	then '[newTime]	else if obj.valueChanged	then '[valueChanged]	else if obj.clusterChanged	then '[clusterChanged]		else '[viewDrawScript];		// default	endonexception |evt.ex| do return '[];	// in case bad ref, don't do any patch/unpatch);/*xx := getroot():childviewframes(); length(xx);xx[?].viewDrawScript := func() begin Print(:GetDrawBox()); inherited:?viewDrawScript(); endgetroot().xxx := func() begin inherited:?xxx(); Print(['xxx, :globalouterbox()]); end;removeslot(getroot(), 'xxx); nilcall func(children, draw)begin	local child;	foreach child in children	do child.viewDrawScript := draw;end with (xx[8]:childviewframes(), vnc.viewDrawScript)DoDrawing: func(sym, params)begin	local vnc;	if sym='DrawShape and (vnc := GetRoot().(kAppSymbol)) and vnc.vc.refreshAccept	then AddDeferredSend(vnc.vc, 'Refresh, [			INCR_REFRESH, if DEBUG then ['DoDrawing, call kGetAppSymbol with(self)] else NO_DELAY, ShapeBounds(params[0])]);	inherited:?DoDrawing(sym,params);end*/// =====DefineGlobalConstant('byte, {new: func(x) // x = int or arraybegin	if IsInteger(x)	then return MakeBinary(x, 'bytes)	else if IsString(x)	then return MakeBinaryFromHex(x,'bytes) // only at dev-time	else if IsArray(x)	then begin		local int i, len := Length(x);		local /*byte[]*/ obj := MakeBinary(len, 'bytes);		for i:=0 to len-1		do StuffByte(obj, i, x[i]);		return obj;		end;end,	});DefineGlobalConstant('int, {new: func(int len)	return byte:new(len*4),	//Array(len,0),});// for debugging (or use StrHexDump)DefineGlobalConstant('kPrintBytes, func(/*byte[]*/ b, int offset, int len, /*string*/ name)begin	if not len	then len := Length(b)-offset;	local shex := "0123456789ABCDEF";	local int i, val;	Write(name & $[ & len & "]: ");	for i:=0 to len-1	do begin		val := ExtractByte(b,offset+i);		Write("0x" & shex[val >> 4] & shex[Band(val, 0xF)] & $,) 		end;	Write(unicodeCR);end);/*Binary	Dec	Hex0000	 0	0x00001	 1	0x10010	 2	0x20011	 3	0x30100	 4	0x40101	 5	0x50110	 6	0x60111	 7	0x71000	 8	0x81001	 9	0x91010	10	0xA1011	11	0xB1100	12	0xC1101	13	0xD1110	14	0xE1111	15	0xF*//*call func(n)begin	local x;	local i, t := ticks();	for i:=1 to n	do begin		x :=		//do x := 		end;	ticks()-t;end with (100)*/